package com.aurionpro.model;

	import java.util.Iterator;
	import java.util.NoSuchElementException;

	public class CustomLinkedList<T> implements Iterable<T> {

	    private Node<T> head;
	    private int size;

	    public CustomLinkedList() {
	        head = null;
	        size = 0;
	    }

	    // Node class to represent individual elements in the linked list
	    private class Node<T> {
	        T data;
	        Node<T> next;

	        Node(T data) {
	            this.data = data;
	            next = null;
	        }
	    }

	    // Add an element to the end of the linked list
	    public void add(T data) {
	        Node<T> newNode = new Node<>(data);
	        if (head == null) {
	            head = newNode;
	        } else {
	            Node<T> current = head;
	            while (current.next != null) {
	                current = current.next;
	            }
	            current.next = newNode;
	        }
	        size++;
	    }

	    // Display all elements in the linked list
	    public void display() {
	        Node<T> current = head;
	        while (current != null) {
	            System.out.print(current.data + " ");
	            current = current.next;
	        }
	        System.out.println();
	    }

	    // Remove an element from the linked list
	    public void remove(T data) {
	        if (head == null) {
	            return;
	        }

	        if (head.data.equals(data)) {
	            head = head.next;
	            size--;
	            return;
	        }

	        Node<T> current = head;
	        while (current.next != null) {
	            if (current.next.data.equals(data)) {
	                current.next = current.next.next;
	                size--;
	                return;
	            }
	            current = current.next;
	        }
	    }

	    // Iterator implementation
	    @Override
	    public Iterator<T> iterator() {
	        return new LinkedListIterator();
	    }

	    private class LinkedListIterator implements Iterator<T> {
	        private Node<T> current = head;

	        @Override
	        public boolean hasNext() {
	            return current != null;
	        }

	        @Override
	        public T next() {
	            if (!hasNext()) {
	                throw new NoSuchElementException();
	            }
	            T data = current.data;
	            current = current.next;
	            return data;
	        }
	    }

	    public static void main(String[] args) {
	        CustomLinkedList<Integer> list = new CustomLinkedList<>();
	        list.add(10);
	        list.add(20);
	        list.remove(10);
	        list.display();

	        System.out.println("Iterating through the linked list:");
	        for (int item : list) {
	            System.out.println(item);
	        }
	    }
	}


}
